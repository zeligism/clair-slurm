#!/bin/bash
#SBATCH --job-name=clair-call-variants
#SBATCH --output=clair-call-variants-%j.out
#SBATCH --error=clair-call-variants-%j.err
#SBATCH --time=24:00:00
#SBATCH --cpus-per-task=24
#SBATCH --mail-type=ALL
#SBATCH --mail-user=aa5525@nyu.edu

module purge
source activate clair

# Number of parallel jobs to run
N_JOBS=$(nproc)
echo "Running $N_JOBS jobs in parallel."

# Assuming contig is 100M bp long, call variants on chunks in parallel for each core
REGION_CHUNK_SIZE=5000000

# disable GPU if you have one installed
export CUDA_VISIBLE_DEVICES=""

# Create temporary file containing jobs to be executed in parallel
command_file=$(mktemp)
python $CLAIR callVarBamParallel \
     --sampleName "$SAMPLE_NAME" \
     --chkpnt_fn "$MODEL" \
     --bam_fn "$BAM" \
     --ref_fn "$REF" \
     ${CAPTURE_BED:+--bed_fn "$CAPTURE_BED"} \
     --output_prefix "$OUTPUT_PREFIX" \
     --threshold $THRESHOLD \
     --refChunkSize $REGION_CHUNK_SIZE \
     --pysam_for_all_indel_bases \
     > "$command_file"

# Run jobs in parallel
cat "$command_file" | parallel -j $N_JOBS

# Find incomplete VCF files and rerun them
for i in ${OUTPUT_PREFIX}.*.vcf; do
  if ! [ -z "$(tail -c 1 "$i")" ]; then
    echo "$i"
  fi
done | grep -f - "$command_file" | sh

# concatenate vcf files and sort the variants called
vcfcat ${OUTPUT_PREFIX}.*.vcf | bcftools sort -m 2G | bgziptabix "${VCF_OUTPUT}.vcf.gz"

# Remove extraneous job-related files
rm "$command_file"
rm ${OUTPUT_PREFIX}.*.vcf

